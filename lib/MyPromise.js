"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _PromiseResolutionProcedure = _interopRequireDefault(require("./PromiseResolutionProcedure"));

var _PromiseState = require("./PromiseState");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// 1.1. “promise” is an object or function with a then method whose behavior conforms to the Promises/A+ specification.
var MyPromise =
/*#__PURE__*/
function () {
  _createClass(MyPromise, [{
    key: "state",
    // instance variables
    // getters & setters
    get: function get() {
      return this.STATE;
    }
  }]);

  function MyPromise() {
    var _this = this;

    var executor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    _classCallCheck(this, MyPromise);

    _defineProperty(this, "value", void 0);

    _defineProperty(this, "STATE", void 0);

    _defineProperty(this, "onFulfilled", void 0);

    _defineProperty(this, "onRejected", void 0);

    _defineProperty(this, "promiseSettlementQueue", void 0);

    this.value = null; // default promise value as null

    this.STATE = _PromiseState.PromiseState.PENDING; // default promise state as pending
    // register default handlers for promise on fulfillment and rejection

    this.onFulfilled = function (value) {
      return value;
    };

    this.onRejected = function (reason) {
      throw reason;
    }; // create an empty promise settlement queue for promises generated by then calls


    this.promiseSettlementQueue = []; // bind executor resolve reject callbacks

    if (executor) {
      executor(function (value) {
        _PromiseResolutionProcedure.default.resolve(_this, value);
      }, function (reason) {
        _this.reject(reason);
      });
    }
  }
  /**
   * 2.2.1 Both onFulfilled and onRejected are optional arguments:
   *
   * @param onFulfilled
   * @param onRejected
   */


  _createClass(MyPromise, [{
    key: "then",
    value: function then(onFulfilled, onRejected) {
      // create a new promise to be returned by then for promise chaining
      var promise = new MyPromise(); // 2.2.1.1 If onFulfilled is not a function, it must be ignored.

      if (typeof onFulfilled === "function") {
        promise.onFulfilled = onFulfilled;
      } // 2.2.1.2 If onRejected is not a function, it must be ignored.


      if (typeof onRejected === "function") {
        promise.onRejected = onRejected;
      }
      /**
       * 2.2.6. then may be called multiple times on the same promise.
       *   2.2.6.1. If/when promise is fulfilled, all respective onFulfilled
       *     callbacks must execute in the order of their originating calls to then.
       *   2.2.6.2. If/when promise is rejected, all respective onRejected
       *     callbacks must execute in the order of their originating calls to then.
       */


      this.promiseSettlementQueue.push(promise);
      this.processRegisteredHandlers(); // 2.2.7. then must return a promise

      return promise;
    }
    /**
     * 2.1.1. When pending, a promise:
     *   2.1.1.1. may transition to either the fulfilled or rejected state.
     * 2.1.2. When fulfilled, a promise:
     *   2.1.2.1. must not transition to any other state.
     *   2.1.2.2. must have a value, which must not change.
     * 2.1.3. When rejected, a promise:
     *   2.1.3.1. must not transition to any other state.
     *   2.1.3.2. must have a reason, which must not change.
     *
     * @param state state to transition to
     * @param value value passed with the transition for
     */

  }, {
    key: "transitionState",
    value: function transitionState(state, value) {
      if (this.STATE === state || this.STATE !== _PromiseState.PromiseState.PENDING) {
        // if the current state is same as the state being transitioned to
        // or the promise is not currently in pending state
        // do nothing
        return;
      }

      this.value = value;
      this.STATE = state;
      this.processRegisteredHandlers();
    }
    /**
     * fulfill
     * @param value any value
     */

  }, {
    key: "fulfill",
    value: function fulfill(value) {
      this.transitionState(_PromiseState.PromiseState.FULFILLED, value);
    }
    /**
     * reject
     * @param reason can by anything but generally an instance of Error object
     */

  }, {
    key: "reject",
    value: function reject(reason) {
      this.transitionState(_PromiseState.PromiseState.REJECTED, reason);
    }
    /**
     * tries to adopt state of supplied promise
     * @param x Promise object, whose state the current promise instance will adopt
     */

  }, {
    key: "adoptStateOf",
    value: function adoptStateOf(x) {
      this.transitionState(x.state, x.value);
    }
  }, {
    key: "processRegisteredHandlers",
    value: function processRegisteredHandlers() {
      var _this2 = this;

      if (this.STATE !== _PromiseState.PromiseState.PENDING) {
        // 2.2.4 onFulfilled or onRejected must not be called
        // until the execution context stack contains only platform code.
        setTimeout(function () {
          // 2.2.7. then may be called multiple times on the same promise.
          //   2.2.6.1. If/when promise is fulfilled,
          //     all respective onFulfilled callbacks must execute in the
          //     order of their originating calls to then.
          //   2.2.6.2. If/when promise is rejected,
          //     all respective onRejected callbacks must execute in the
          //     order of their originating calls to then.
          // this is acheived by dequeue on FIFO data structure (i.e. queue)
          while (_this2.promiseSettlementQueue.length) {
            // dequeue
            var promise = _this2.promiseSettlementQueue.shift();

            try {
              // 2.2.5. onFulfilled and onRejected must be called as functions (i.e. with no this value).
              var value = (_this2.STATE === _PromiseState.PromiseState.FULFILLED ? promise.onFulfilled : promise.onRejected)(_this2.value); // 2.2.7.1. If either onFulfilled or onRejected returns a value x,
              // run the Promise Resolution Procedure [[Resolve]](promise2, x).

              _PromiseResolutionProcedure.default.resolve(promise, value);
            } catch (e) {
              // 2.2.7.2. If either onFulfilled or onRejected throws an exception e,
              // promise2 must be rejected with e as the reason.
              promise.reject(e);
            }
          }
        }, 0);
      }
    }
  }]);

  return MyPromise;
}();

exports.default = MyPromise;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,